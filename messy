I can provide examples of vulnerable code for testing purposes, but I want to emphasize the importance of responsible disclosure and security testing. Please use these examples only for educational purposes or in a controlled environment with proper authorization.

*Examples*
1. *SQL Injection*:
```
import sqlite3

def vulnerable_sql_query(username, password):
    conn = sqlite3.connect("users.db")
    cursor = conn.cursor()
    query = f"SELECT * FROM users WHERE username = '{username}' AND password = '{password}'"
    cursor.execute(query)
    result = cursor.fetchone()
    return result
```
2. *Cross-Site Scripting (XSS)*:
```
app.get('/xss', (req, res) => {
  const userInput = req.query.input;
  res.send(`<h1>${userInput}</h1>`);
});
```
3. *Command Injection*:
```
import subprocess

def vulnerable_command_execution(input):
    subprocess.run(f"echo {input}", shell=True)
```
4. *Insecure Deserialization*:
```
import pickle

def vulnerable_deserialization(data):
    return pickle.loads(data)
```

*Important Notes*
1. *Use in controlled environments*: Only use these examples in controlled environments or for educational purposes.
2. *Proper authorization*: Ensure you have proper authorization to test the code.
3. *Fix vulnerabilities*: After testing, make sure to fix the vulnerabilities and secure the code.

If you need help with securing code or understanding vulnerabilities, I'd be happy to assist.
